# populate upper triangular part also
for (row0 in 1:(n1-1)){
for (colm0 in (row0+1):n1){
full_dmat[row0, colm0] = full_dmat[colm0, row0] } }
## set threshold in percentile terms (can be slider based widget in shiny app)
#thresh0=0.25  # say. top 25% closest rows only form links
thresh1 = quantile(unlist(full_dmat), cutoff_percentile) %>% as.numeric(); thresh1
cutoff_percentile=0.22
## set threshold in percentile terms (can be slider based widget in shiny app)
#thresh0=0.25  # say. top 25% closest rows only form links
thresh1 = quantile(unlist(full_dmat), cutoff_percentile) %>% as.numeric(); thresh1
id_var="carb"
input_df<-mtcars
rownames(input_df) <-  make.names(input_df[,id_var], unique=TRUE)
#rownames(input_df) <- input_df[,id_var]
input_df[,id_var] <- NULL
# first, retain only metric colms
a0_logi = apply(input_df, 2, function(x) {is.numeric(x)}); a0_logi
df0 = input_df[, a0_logi]
n1 = nrow(df0); n1
# calc dist mat
dist_mat = dist(as.matrix(scale(df0)))
# build full square-shaped dist matrix
full_dmat = matrix(0, n1, n1)
diag(full_dmat) = 1  # created shell matrix
counter0 = 1
for (i in 1:(n1-1)){
counter1 = counter0 + (n1 - i) - 1; counter1
vals = dist_mat[counter0: counter1]; vals
full_dmat[(i+1):n1, i] = vals; full_dmat
counter0 = counter1+1; counter0
} # 0.01s for 32x32 mat
# populate upper triangular part also
for (row0 in 1:(n1-1)){
for (colm0 in (row0+1):n1){
full_dmat[row0, colm0] = full_dmat[colm0, row0] } }
## set threshold in percentile terms (can be slider based widget in shiny app)
#thresh0=0.25  # say. top 25% closest rows only form links
thresh1 = quantile(unlist(full_dmat), cutoff_percentile) %>% as.numeric(); thresh1
adj_mat = map_dfc(full_dmat, function(x) {1*(x < thresh1)}) # 0.03s
adj_mat1 = matrix(adj_mat, n1, n1) # adj_mat1[1:8,1:8]
rownames(adj_mat1) = rownames(input_df)
colnames(adj_mat1) = rownames(input_df)
adj_mat1
mtcars$carb
rownames(input_df)
id_var
rownames(input_df) <-  make.names(input_df[,id_var], unique=TRUE)
input_df<- mtcars
rownames(input_df) <-  make.names(input_df[,id_var], unique=TRUE)
rownames(input_df)
#rownames(input_df) <- input_df[,id_var]
input_df[,id_var] <- NULL
# first, retain only metric colms
a0_logi = apply(input_df, 2, function(x) {is.numeric(x)}); a0_logi
df0 = input_df[, a0_logi]
n1 = nrow(df0); n1
# calc dist mat
dist_mat = dist(as.matrix(scale(df0)))
# build full square-shaped dist matrix
full_dmat = matrix(0, n1, n1)
diag(full_dmat) = 1  # created shell matrix
counter0 = 1
for (i in 1:(n1-1)){
counter1 = counter0 + (n1 - i) - 1; counter1
vals = dist_mat[counter0: counter1]; vals
full_dmat[(i+1):n1, i] = vals; full_dmat
counter0 = counter1+1; counter0
} # 0.01s for 32x32 mat
# populate upper triangular part also
for (row0 in 1:(n1-1)){
for (colm0 in (row0+1):n1){
full_dmat[row0, colm0] = full_dmat[colm0, row0] } }
## set threshold in percentile terms (can be slider based widget in shiny app)
#thresh0=0.25  # say. top 25% closest rows only form links
thresh1 = quantile(unlist(full_dmat), cutoff_percentile) %>% as.numeric(); thresh1
adj_mat = map_dfc(full_dmat, function(x) {1*(x < thresh1)}) # 0.03s
adj_mat1 = matrix(adj_mat, n1, n1) # adj_mat1[1:8,1:8]
rownames(adj_mat1) = rownames(input_df)
colnames(adj_mat1) = rownames(input_df)
id_var<-mpg
rownames(input_df) <-  make.names(input_df[,id_var], unique=TRUE)
id_var<-'mpg'
rownames(input_df) <-  make.names(input_df[,id_var], unique=TRUE)
rownames(input_df)
#rownames(input_df) <- input_df[,id_var]
input_df[,id_var] <- NULL
# first, retain only metric colms
a0_logi = apply(input_df, 2, function(x) {is.numeric(x)}); a0_logi
df0 = input_df[, a0_logi]
n1 = nrow(df0); n1
# calc dist mat
dist_mat = dist(as.matrix(scale(df0)))
# build full square-shaped dist matrix
full_dmat = matrix(0, n1, n1)
diag(full_dmat) = 1  # created shell matrix
counter0 = 1
for (i in 1:(n1-1)){
counter1 = counter0 + (n1 - i) - 1; counter1
vals = dist_mat[counter0: counter1]; vals
full_dmat[(i+1):n1, i] = vals; full_dmat
counter0 = counter1+1; counter0
} # 0.01s for 32x32 mat
# populate upper triangular part also
for (row0 in 1:(n1-1)){
for (colm0 in (row0+1):n1){
full_dmat[row0, colm0] = full_dmat[colm0, row0] } }
## set threshold in percentile terms (can be slider based widget in shiny app)
#thresh0=0.25  # say. top 25% closest rows only form links
thresh1 = quantile(unlist(full_dmat), cutoff_percentile) %>% as.numeric(); thresh1
adj_mat = map_dfc(full_dmat, function(x) {1*(x < thresh1)}) # 0.03s
adj_mat1 = matrix(adj_mat, n1, n1) # adj_mat1[1:8,1:8]
rownames(adj_mat1) = rownames(input_df)
colnames(adj_mat1) = rownames(input_df)
source("https://raw.githubusercontent.com/sudhir-voleti/network-analysis-shinyapp/master/network%20apps%20dependency%20source%20file.R")
runGitHub("network-analysis-shinyapp","sudhir-voleti")
source("https://raw.githubusercontent.com/yogesh1612/network-analysis-shinyapp/master/network%20apps%20dependency%20source%20file.R")
runGitHub("network-analysis-shinyapp","yogesh1612")
runApp()
runApp()
runApp()
runApp()
runGitHub("data-pre-proc-app","sudhir-voleti")
runGitHub("data-pre-proc-app","sudhir-voleti","main")
runGitHub("data_pre-process_shinyapp","sudhir-voleti","main")
runGitHub("factor-analysis-shinyapp","sudhir-voleti")
runGitHub("factor-analysis-shinyapp-1","sudhir-voleti")
runGitHub("factor-analysis-shinyapp-1","yogesh1612")
shiny::runApp()
runApp()
runApp()
runApp()
mtcars
diabetes
iris
str(iris)
iris %>%  select_if(is.factor)
library(dplyr)
iris %>%  select_if(is.factor)
iris %>%  select_if(is.factor)%>%colnames()
names(mtcars$mpg)
colnames(mtcars$mpg)
shiny::runApp()
runApp()
Titanic %>%
as_data_frame() %>%
mutate_if(is.character, factor) %>%
select_if(~ nlevels(.) < 4)
str(Titanic)
Titanic %>%
as_data_frame() %>%
mutate_if(is.character, factor)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("https://raw.githubusercontent.com/yogesh1612/network_data_prep_app/main/dependencies.R")
runGitHub("network_data_prep_app","yogesh1612")
runGitHub("network_data_prep_app","yogesh1612","main")
df <- mtcars
mtcars %>%
summarise_all(typeof) %>%
gather
Titanic %>%
summarise_all(typeof) %>%
gather
class(Titanic)
df %>%
summarise_all(typeof) %>%
gather
df %>%
summarise_all(typeof) %>%
gather()
df %>%
summarise_all(typeof) %>%
gather() %>% rename("key"="Variable","value"="datatype")
df %>%
summarise_all(typeof) %>%
gather() %>% rename("Variable"="key","datatype"="value")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(mtcars$mpg)
apply(df,getmode(x))
apply(df,function(x) getmode(x))
apply(df, getmode())
df %>%
summarise_all(typeof,mean) %>%
gather() %>% rename("variable"="key","datatype"="value")
df %>%
summarise_all(typeof,mean) %>%
gather()
df %>% group_by(grp) %>%
summarise_at(.vars = is.numeric,
.funs = c(Mean="mean", Sd="sd"))
df %>%
summarise_at(.vars = is.numeric,
.funs = c(Mean="mean", Sd="sd"))
df %>%
summarise_at(.vars = vars(),
.funs = c(Mean="mean", Sd="sd"))
min_max <- list(
min = ~min(.x, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE)
)
df %>% summarise(across(where(is.numeric), min_max))
df %>%
summarise(
tibble(n = n(), across(where(is.numeric), min_max))
)
df %>%
summarise(
tibble(n = n(), across(where(is.numeric), mean))
)
t<- df %>%
summarise(
tibble(n = n(), across(where(is.numeric), mean))
)
class(t)
t<- df %>%
summarise(
tibble(n = n(), across(where(is.numeric), mean,sd))
)
t
t<- df %>%
summarise(
tibble(across(where(is.numeric), mean).
across(where(is.numeric),min))
)
t<- df %>%
summarise(
tibble(across(where(is.numeric), mean).
across(where(is.numeric),min))
)
t<- df %>%
summarise(
tibble(across(where(is.numeric), mean),
across(where(is.numeric),min))
)
t<- df %>%
summarise(
tibble( across(where(is.numeric), mean))
)
View(t)
t<- df %>%
summarise(
tibble( across(where(is.numeric), mean))
)%>%t()
View(t)
t<- df %>%
summarise(
tibble( across(where(is.numeric), mean))
)%>%t()%>%round(2)
View(t)
t<- df %>%
summarise(
tibble( across(where(is.numeric), mean))
)%>%t()%>%round(2)%>%as.data.frame()
View(t)
t<- df %>%
summarise(
tibble( across(where(is.numeric), mean))
)%>%t()%>%round(2)%>%as.data.frame()
View(t)
min_max <- list(
min = ~min(na.rm = TRUE),
max = ~max(.x, na.rm = TRUE)
)
df %>% summarise(across(where(is.numeric), min_max))
t1<-df %>% summarise(across(where(is.numeric), min_max))
View(t1)
t1 <-df %>% summarise(across(where(is.numeric), min_max))
min_max <- list(
min = ~min(.x, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x,na.rm=TRUE)
)
t1 <-df %>% summarise(across(where(is.numeric), min_max))
View(t1)
t1 <-df %>% summarise(across(where(is.numeric), min_max))%>%t()
View(t1)
t1 <-df %>% summarise(across(where(is.numeric), min_max))
View(t1)
t1 %>%
rename_at(.vars = vars(ends_with("_mean")),
.funs = funs(sub("[.]mean$", "", .)))
min_max_mean <- list(
min = ~min(.x, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x,na.rm=TRUE)
)
t1 <-df %>% summarise(across(where(is.numeric), min_max_mean))
t1
df %>% summarise(across(where(is.numeric), mean))
t1 <-df %>% summarise(across(where(is.numeric), funs = c(Mean="mean", Sd="sd")))
View(t1)
View(df)
df %>% summarise(across(where(is.numeric), .funs = c(Mean="mean", Sd="sd")))
df %>%
summarise_at(.vars = vars(),
.funs = c(Mean="mean", Sd="sd"))
df %>%
select_if(is.numeric) %>%
summarise_all(funs(list(summary(.))))
t1 <-df %>%
select_if(is.numeric) %>%
summarise_all(funs(list(summary(.))))
View(t1)
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))
mean <-df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))
View(mean)
mean <-df %>%
summarise(across(where(is.numeric), range, na.rm= TRUE))
View(mean)
mean <-df %>%
summarise(across(where(is.numeric), sum(is.na)))#, na.rm= TRUE))
df %>%
summarise(across(where(is.numeric), max, na.rm= TRUE))%>%t()
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()%>%round(2)
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%round(2)%>%t()
mean <- df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
sd <- df %>%
sd <- df %>%
summarise(across(where(is.numeric), sd, na.rm= TRUE))%>%t()
min <- df %>%
summarise(across(where(is.numeric), min, na.rm= TRUE))%>%t()
max <- df %>%
summarise(across(where(is.numeric), max, na.rm= TRUE))%>%t()
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
df %>%
summarise(across(where(is.numeric|is.double), mean, na.rm= TRUE))%>%t()
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
df %>%
summarise(across(where(is.numeric), sd, na.rm= TRUE))
df <- mtcars
df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
mean <- df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
View(mean)
cbind(mean,sd,min,max)
sd <- df %>%
summarise(across(where(is.numeric), sd, na.rm= TRUE))%>%t()
min <- df %>%
summarise(across(where(is.numeric), min, na.rm= TRUE))%>%t()
max <- df %>%
summarise(across(where(is.numeric), max, na.rm= TRUE))%>%t()
cbind(mean,sd,min,max)
t1 <- cbind(mean,sd,min,max)
t2 <- tibble::rownames_to_column(t1, "variable")
t1 <- as.data.frame(cbind(mean,sd,min,max))
t2 <- tibble::rownames_to_column(t1, "variable")
View(t2)
names(t1) <- c('Mean',"SD","Min","Max")
t2 <- tibble::rownames_to_column(t1, "variable")
View(t2)
summ_df <- df %>%
summarise_all(typeof) %>%
gather() %>% rename("Variable"="key","Datatype"="value")
left_join(summ_df,t2)
left_join(summ_df,t2,by=c("Variable"))
left_join(summ_df,t2,by="Variable")
summ_df
t2
t1 <- as.data.frame(cbind(mean,sd,min,max))
names(t1) <- c('Mean',"SD","Min","Max")
t2 <- tibble::rownames_to_column(t1, "Variable")
left_join(summ_df,t2,by="Variable")
t2 <- tibble::rownames_to_column(t1, "Variable")%>% mutate_if(is.numeric, round, digits=2)
left_join(summ_df,t2,by="Variable")
?left_join
left_join(summ_df,t2,by=c("Variable"))
summry_df <- function(df){
# select data type
summ_df <- data.frame()
summ_df <- df %>%
summarise_all(typeof) %>%
gather() %>% rename("Variable"="key","Datatype"="value")
mean <- df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
sd <- df %>%
summarise(across(where(is.numeric), sd, na.rm= TRUE))%>%t()
min <- df %>%
summarise(across(where(is.numeric), min, na.rm= TRUE))%>%t()
max <- df %>%
summarise(across(where(is.numeric), max, na.rm= TRUE))%>%t()
t1 <- as.data.frame(cbind(mean,sd,min,max))
names(t1) <- c('Mean',"SD","Min","Max")
t2 <- tibble::rownames_to_column(t1, "Variable")%>% mutate_if(is.numeric, round, digits=2)
return(left_join(summ_df,t2,by=c("Variable")))
}
summry_df(mtcars)
runApp()
t<-read.csv("data/mtcars.csv")
str(t)
df<- t
df %>%
summarise_all(typeof) %>%
gather() %>% rename("Variable"="key","Datatype"="value")
mean <- df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
sd <- df %>%
summarise(across(where(is.numeric), sd, na.rm= TRUE))%>%t()
min <- df %>%
summarise(across(where(is.numeric), min, na.rm= TRUE))%>%t()
max <- df %>%
summarise(across(where(is.numeric), max, na.rm= TRUE))%>%t()
t1 <- as.data.frame(cbind(mean,sd,min,max))
names(t1) <- c('Mean',"SD","Min","Max")
t2 <- tibble::rownames_to_column(t1, "Variable")%>% mutate_if(is.numeric, round, digits=2)
View(t2)
str(t2)
t3 <- left_join(summ_df,t2,by=c("Variable"))
summ_df <- df %>%
summarise_all(typeof) %>%
gather() %>% rename("Variable"="key","Datatype"="value")
mean <- df %>%
summarise(across(where(is.numeric), mean, na.rm= TRUE))%>%t()
sd <- df %>%
summarise(across(where(is.numeric), sd, na.rm= TRUE))%>%t()
min <- df %>%
summarise(across(where(is.numeric), min, na.rm= TRUE))%>%t()
max <- df %>%
summarise(across(where(is.numeric), max, na.rm= TRUE))%>%t()
t1 <- as.data.frame(cbind(mean,sd,min,max))
names(t1) <- c('Mean',"SD","Min","Max")
t2 <- tibble::rownames_to_column(t1, "Variable")%>% mutate_if(is.numeric, round, digits=2)
t3 <- left_join(summ_df,t2,by=c("Variable"))
View(t3)
runApp()
runApp()
runApp()
source("https://raw.githubusercontent.com/sudhir-voleti/network_data_prep_app/main/dependencies.R")
runGitHub("network_data_prep_app","sudhir-voleti","mian")
runGitHub("network_data_prep_app","sudhir-voleti","main")
summry_df(Titanic)
summry_df(iris)
runApp()
runApp()
typeof(iris$Sepal.Length)
typeof(iris$Species)
class(iris$Species)
runApp()
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
df %>%
summarise(getmode)%>%t()
apply(mtcars,getmode(x))
apply(mtcars,function(x) getmode(x))
sapply(mtcars,function(x) getmode(x))
runApp()
runApp()
mtcars %>% mutate(id = row_number())
tibble::rowid_to_column(df, "ID")
tibble::rowid_to_column(mtcars, "ID")
df <-tibble::rowid_to_column(mtcars, "ID")
df$ID = paste0('ID_', df$ID)
View(df)
runApp()
runApp()
runApp()
shiny::runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/network-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/network_data_prep_app')
runApp()
shiny::runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/advanced-text-analysis-main')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/network-analysis')
shiny::runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/network-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/recommendation-system')
runApp()
runApp()
runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/sudhir-github/network_data_prep_app-main')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/network_data_prep_app')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/network-data-prep')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/network_data_prep_app')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/network-data-prep')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/network_data_prep_app')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/network-data-prep')
runApp()
shiny::runApp()
runApp()
