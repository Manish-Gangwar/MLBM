d <- pcobj$svd
u <- predict(pcobj)$x/nobs.factor
v <- pcobj$scaling
d.total <- sum(d^2)
} else {
stop('Expected a object of class prcomp, princomp, PCA, or lda')
}
# Scores
choices <- pmin(choices, ncol(u))
df.u <- as.data.frame(sweep(u[,choices], 2, d[choices]^obs.scale, FUN='*'))
# Directions
v <- sweep(v, 2, d^var.scale, FUN='*')
df.v <- as.data.frame(v[, choices])
names(df.u) <- c('xvar', 'yvar')
names(df.v) <- names(df.u)
if(pc.biplot) {
df.u <- df.u * nobs.factor
}
# Scale the radius of the correlation circle so that it corresponds to
# a data ellipse for the standardized PC scores
r <- sqrt(qchisq(circle.prob, df = 2)) * prod(colMeans(df.u^2))^(1/4)
# Scale directions
v.scale <- rowSums(v^2)
df.v <- r * df.v / sqrt(max(v.scale))
# Change the labels for the axes
if(obs.scale == 0) {
u.axis.labs <- paste('standardized PC', choices, sep='')
} else {
u.axis.labs <- paste('PC', choices, sep='')
}
# Append the proportion of explained variance to the axis labels
u.axis.labs <- paste(u.axis.labs,
sprintf('(%0.1f%% explained var.)',
100 * pcobj$sdev[choices]^2/sum(pcobj$sdev^2)))
# Score Labels
if(!is.null(labels)) {
df.u$labels <- labels
}
# Grouping variable
if(!is.null(groups)) {
df.u$groups <- groups
}
# Variable Names
if(varname.abbrev) {
df.v$varname <- abbreviate(rownames(v))
} else {
df.v$varname <- rownames(v)
}
# Variables for text label placement
df.v$angle <- with(df.v, (180/pi) * atan(yvar / xvar))
df.v$hjust = with(df.v, (1 - varname.adjust * sign(xvar)) / 2)
# Base plot
g <- ggplot(data = df.u, aes(x = xvar, y = yvar)) +
xlab(u.axis.labs[1]) + ylab(u.axis.labs[2]) + coord_equal()
if(var.axes) {
# Draw circle
if(circle)
{
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- data.frame(xvar = r * cos(theta), yvar = r * sin(theta))
g <- g + geom_path(data = circle, color = muted('white'),
size = 1/2, alpha = 1/3)
}
# Draw directions
g <- g +
geom_segment(data = df.v,
aes(x = 0, y = 0, xend = xvar, yend = yvar),
arrow = arrow(length = unit(1/2, 'picas')),
color = muted('red'))
}
# Draw either labels or points
if(!is.null(df.u$labels)) {
if(!is.null(df.u$groups)) {
g <- g + geom_text(aes(label = labels, color = groups),
size = labels.size)
} else {
g <- g + geom_text(aes(label = labels), size = labels.size)
}
} else {
if(!is.null(df.u$groups)) {
g <- g + geom_point(aes(color = groups), alpha = alpha)
} else {
g <- g + geom_point(alpha = alpha)
}
}
# Overlay a concentration ellipse if there are groups
if(!is.null(df.u$groups) && ellipse) {
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- cbind(cos(theta), sin(theta))
ell <- ddply(df.u, 'groups', function(x) {
if(nrow(x) <= 2) {
return(NULL)
}
sigma <- var(cbind(x$xvar, x$yvar))
mu <- c(mean(x$xvar), mean(x$yvar))
ed <- sqrt(qchisq(ellipse.prob, df = 2))
data.frame(sweep(circle %*% chol(sigma) * ed, 2, mu, FUN = '+'),
groups = x$groups[1])
})
names(ell)[1:2] <- c('xvar', 'yvar')
g <- g + geom_path(data = ell, aes(color = groups, group = groups))
}
# Label the variable axes
if(var.axes) {
g <- g +
geom_text(data = df.v,
aes(label = varname, x = xvar, y = yvar,
angle = angle, hjust = hjust),
color = 'darkred', size = varname.size)
}
# Change the name of the legend for groups
# if(!is.null(groups)) {
#   g <- g + scale_color_brewer(name = deparse(substitute(groups)),
#                               palette = 'Dark2')
# }
# TODO: Add a second set of axes
return(g)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggpairs")
if (!require("GGally")) {install.packages("GGally")}
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
rsconnect::setAccountInfo(name='isb-iids', token='71C742E1833C4857A4910C1526C3C8D5', secret='7+tUPwzc2zlqvvwzFprZpxRpQBEyHaw9vx5ArsVV')
shiny::runApp()
runApp('C:/Users/20054/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('C:/Users/20054/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp()
runApp()
runApp('C:/Users/20054/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('C:/Users/20054/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('C:/Users/20054/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('C:/Users/20054/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp()
shiny::runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/regression')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/decision-tree')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/decision-tree')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/factor-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/factor-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/decision-tree')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/binary-logit')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/decision-tree')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/decision-tree')
shiny::runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
shiny::runApp()
runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/basic-stats')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/cluster-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/cluster-analysis')
runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
shiny::runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
shiny::runApp()
if (!require("M3C")) {install.packages("M3C")}
install.packages("umap")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("dbscan")
shiny::runApp()
runApp()
runApp()
library(umapr)
devtools::install_github("ropenscilabs/umapr")
head(iris)
iris.umap = umap(iris[,2:5])
iris.umap = umap(as.matrix(iris[,2:5]))
library(umapr)
library(umap)
head(iris)
iris.umap = umap(as.matrix(iris[,2:5]))
iris.umap = umap((iris[,2:5]))
iris.umap = umap((iris[,1:4]))
umap.defaults
iris.umap$layout
plot(iris.umap$layout)
library(umap)
head(iris)
iris.umap = umap((iris[,1:4]))
plot(iris.umap$layout)
head(iris.umap)
shiny::runApp()
as.data.frame(iris.umap$layout)
fu=as.data.frame(iris.umap$layout)
colnames(umap.cor) = c("UMAP1", "UMAP2")
runApp()
runApp()
shiny::runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/factor-analysis')
runApp()
shiny::runApp()
runApp()
fxattr = setdiff(colnames(Dataset()), colnames(nu.Dataset()) )
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/factor-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/cluster-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/factor-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/cluster-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/regression')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/factor-analysis')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
load("C:/Users/20054/AppData/Local/Temp/Rar$DI00.297/braincancer_test_data.RData")
View(brain)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/classification')
install.packages(c("dbscan", "umap"))
shiny::runApp()
shinyUI(fluidPage(
# Header:
#headerPanel("Segmentation Analysis"),
titlePanel(title=div(img(src="logo.png",align='right'),h2("Cluster Analysis",style="bold")), windowTitle	='Cluster Analysis'),
# Input in sidepanel:
sidebarPanel(
h4(p("Data Input")),
helpText("Note: first column of the input data must be an obervation id"),
fileInput("file", "Upload data (csv file with observation ID and header)"),
#submitButton(text = "refresh", icon("refresh")),
#(p("Click refresh after loading data and every time you make changes",style="color:red")),
#actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),br(),
#submitButton(text = "refresh", icon("refresh")),br(),
#htmlOutput("Clust"),
#numericInput("Clust", "Choose number of clusters",3),
#submitButton(text = "refresh", icon("refresh")),
#(p("Click refresh after loading data and every time you make changes",style="color:red")),
#actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),
h4(p("Data Selection")),
htmlOutput("xvarselect"),
selectInput("select", "Choose cluster algorithm", c("K-Means","Hierarchical","Spectral","HDBSCAN"), selected = "K-Means"),
htmlOutput("Clust"),
# htmlOutput("outcl"),
htmlOutput("Clusth"),
#selectInput("Clust", "Choose number of clusters", c(2,3,4,5,6,7,8,9), selected = 3),
htmlOutput("samsel"),
#selectInput("obs", "Select sub sample", c("quick run, 10,000 obs", "full dataset"), selected = "quick run, 10,000 obs"),
#selectInput("scale", "Standardize input data (usually yes)",c("yes","no"), selected = "yes"),
htmlOutput("scale"),
htmlOutput("imputemiss"),
htmlOutput("winsor"),
br(),
#submitButton(text = "Apply Changes", icon("refresh"))
),
# Main:
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Overview",
h4(p("Cluster Analysis")),
p("Cluster analysis or clustering is the task of grouping a set of objects in such a way that
objects in the same group (called a cluster) are more similar (in some sense) to each other
than to those in other groups (clusters). It is a main task of exploratory data mining, and
a common technique for statistical data analysis, used in many fields, including pattern
recognition, image analysis, information retrieval, bioinformatics, data compression,
computer graphics and machine learning.",
align="justify"),
p("Note: Cluster analysis can be performed only on the numercial data.",style="color:black"),
tags$a(href="https://en.wikipedia.org/wiki/Cluster_analysis", "-Wikipedia",target="_blank"),
h4(p("Data input")),
#p("First column of the input data must be an obervation id.",style="color:red"),
p("This application requires input data from the user in csv format. To upload data, click on the 'Browse' (in the panel on the the left)
and upload the Segmentation data input file.
Note that this application can read only csv file(comma delimited file), so if you don't have csv input data file, first convert your data in csv format
and then proceed. Make sure you have top row as variable names and first column as id in csv file"
,align="justify"),
p("Once csv file is uploaded successfully, by-default application will perform K-means segmentation with 3 segments.
In the panel on the left you can change the segmentation algorithm and number of segments. Accordingly results will be updated in all the tabs",
align="justify"),
# h4(p("Download Sample Input File")),
downloadButton('downloadData', 'download sample input file'),
br(),br(),
#p("Cluster analysis or clustering is the task of grouping a set of objects in such a way that objects in the same group (called a cluster) are more similar (in some sense) to each other than to those in other groups (clusters). It is a main task of exploratory data mining, and a common technique for statistical data analysis, used in many fields, including pattern recognition, image analysis, information retrieval, bioinformatics, data compression, computer graphics and machine learning."),
),
tabPanel("Data Summary",
#h4("select only numerical variables with no missing values in X and click 'Refresh' "),
#verbatimTextOutput("tail"),h4("Selected Variables"), verbatimTextOutput("head"),
#br(), (p('First column of the input data must be an observation id',style="color:red")),
h4("Review Input Data"),
dataTableOutput("readdata"),tags$head(tags$style("tfoot {display: table-header-group;}")),br(),
#(p("Click refresh after loading data and every time you make changes",style="color:black")),
#submitButton(text = "refresh", icon("refresh")),
#actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),
h4("Data Summary of Selected X"),htmlOutput("imout"),verbatimTextOutput("summ"),br(),
h4("Missing Data"),verbatimTextOutput("missing"),br(),
h4("Correlation Table - Input data"), verbatimTextOutput("correlation"),
#h4(p("Correlation")),
#(p('remove missing data variable(s) if any, or impute or drop rows - check options in the panel on the left',style="color:black")),
#(plotOutput("corplot",height = 850, width = 850))
br()),
tabPanel("Data Visualization",br(),
#h4("Select variable for er's outlier test"),
h4("Be patient generating plots"),
plotOutput("dens"),
h4("Histograms"),
plotOutput("hist"),br(),
h4("Bi-variate Plots"),
# (p('remove missing data variable(s) if any, or impute or drop rows. Check "Data Summary" tab and options in the panel on the left.',style="color:black")),
plotOutput("corplot"),
br(),
br()),
# tabPanel("Missing Data",verbatimTextOutput("mscount"),
#          (p('Remove missing data variable(s), if any, by unchecking it in the "Data Selection" panel on the left, and click refresh.',style="color:red")),
#          submitButton(text = "refresh",icon("refresh")),
#          h4("Missing Data"),verbatimTextOutput("missing")
#          ),
tabPanel("Cluster Analysis",br(),
#p("Step1: Choose cluster algorithm"),
#p("Step1: Select only numerical X variables in the 'Data Selection' panel on the left."),
(p('Step1: Examine  "Data Summary" tab, check missing data variable(s), if any.',style="color:black")),
# p("Step2: Choose cluster algorithm and number of clusters."),
#p("Step4: Click 'refresh' and wait for algorithm to finish estimation.",style="color:black"),
p("Note: Wait for algorithm to finish estimation, it takes a while. Hierarchical & spectral algorithms takes more time.",style="color:black"),
#submitButton(text = "refresh", icon("refresh")),
actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),br(),
#plotOutput("plotpca",height = 400, width = 850),
h4("Check Missing Data Rows Count"),verbatimTextOutput("mscount"),
htmlOutput("misswarn"),
#(p('Remove missing data variable(s) if any - check  "Data Summary" tab',style="color:red")),
h4(textOutput("caption")),verbatimTextOutput("summary"),
plotOutput("plot3",height = 600),
br(),br(),
htmlOutput("scldt1note"),
# h4("Scaled Data Boxplot (if 'Standardize data' option = yes)"),
plotOutput("boxx2"),br(),
#htmlOutput("scldt1note"),
plotOutput("sbplot"),br(),
tags$a(href="https://en.wikipedia.org/wiki/Box_plot", "- click here for boxplots descriptive statistics on wikipedia",target="_blank"),br(),br(),
h4("Review Standardize Input Data"),
dataTableOutput("scaleddata"),tags$head(tags$style("tfoot {display: table-header-group;}")),br(),
#p("Note: Input data is standardized before running cluster analysis.", style="color:black"),
#h4("Summary Standardize Data"),
#verbatimTextOutput("scldt"),
br(), br()),
# tabPanel("Cluster Plot",br(),
#
#          #p("Step1: Choose cluster algorithm"),
#          p("Step1: Select only numerical X variables in the 'Data Selection' panel on the left."),
#          (p('Step2: Examine  "Data Summary" tab and check missing data variable(s), if any.',style="color:black")),
#          p("Step3: Choose cluster algorithm and number of clusters."),
#          #p("Step4: Click 'refresh' and wait for algorithm to finish estimation.",style="color:black"),
#          p("Step4: Wait for algorithm to finish estimation, it takes a while. Hierarchical ans spectral algorithms takes more time.",style="color:black"),
#          #submitButton(text = "refresh", icon("refresh")),
#          actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),br(),
#         # h4(textOutput("caption2")),verbatimTextOutput("summary1"),
#         # h4("Projecting input data onto the first two principal components dimensions."),
#         # plotOutput("plot", height=850),
#          plotOutput("plotcor"),
#          #plotOutput("plot2",height = 400, width = 850),
#          br(),br()),
tabPanel("PCA Visualization",br(),
# p("Step1: Select only numerical X variables in the 'Data Selection' panel on the left."),
(p('Step1: Examine  "Data Summary" tab, check missing data variable(s), if any.',style="color:black")),
#  p("Step2: Choose cluster algorithm and number of clusters."),
#p("Step4: Click 'refresh' and wait for algorithm to finish estimation.",style="color:black"),
p("Note: Projecting input data onto top 2 principal component dimensions (PCA) takes time, be patient.",style="color:black"),
tags$a(href="https://en.wikipedia.org/wiki/Principal_component_analysis", "-Wikipedia", target="_blank"),br(),
# br(),
# actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),br(),
h4(textOutput("caption2")),verbatimTextOutput("summary1"),
h4("Visulaizing Clusters in 2D (top two principal components)."),
plotOutput("plot", height=850),
#h4("Selected Variables Boxplot"),#plotOutput("boxx"),
#plotOutput("boxx2"),
# plotOutput("plotcor"),
#plotOutput("plot2",height = 400, width = 850),
br(),br()),
tabPanel("UMAP Visualization", br(),
#  p("Step1: Select only numerical X variables in the 'Data Selection' panel on the left."),
# (p('Step2: Examine  "Data Summary" tab and check missing data variable(s), if any.',style="color:black")),
# p("Step3: Choose cluster algorithm and number of clusters."),
#p("Step4: Click 'refresh' and wait for algorithm to finish estimation.",style="color:black"),
p("Note: Wait for algorithm to finish estimation, it takes a while.",style="color:black"),
tags$a(href="https://en.wikipedia.org/wiki/Nonlinear_dimensionality_reduction", "-Wikipedia",target="_blank"),br(),
#submitButton(text = "refresh", icon("refresh")),
#actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),br(),
h4(textOutput("caption4")),
plotOutput("plotumap", height=800),
br()),
tabPanel("t-SNE Visualization", br(),
# p("Step1: Select only numerical X variables in the 'Data Selection' panel on the left."),
# (p('Step2: Examine  "Data Summary" tab and check missing data variable(s), if any.',style="color:black")),
# p("Step3: Choose cluster algorithm and number of clusters."),
#p("Step4: Wait for algorithm to finish estimation, hierarchical algorithm takes more time.",style="color:black"),
(p('Note: Projecting input data onto three dimensions (t-SNE) takes a while, be patient.',style="color:black")),
tags$a(href="https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding", "-Wikipedia",target="_blank"),br(),
br(),
#selectInput("dupp", "Drop duplicate values", c("Yes","No"), selected = "No"),
selectInput("perp", "Set perplexity parameter", c(5, 25, 50, 100, 500), selected = 25),
#selectInput("iter", "Set max iterations", c(500,1000), selected = 500),
#numericInput("iter", "Set max iterations",500, min=500, max=5000, step=500),
# actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),br(),
h4(textOutput("caption3")),
#plotOutput("plotumap"),
plotOutput("plotrtsne",height = 800),
br(),br()),
tabPanel("Download Cluster Membership Data", br(),
# p("Step1: Select only numerical X variables in the 'Data Selection' panel on the left."),
# (p('Step1: Examine  "Data Summary" tab and check missing data variable(s), if any.',style="color:black")),
# p("Step3: Choose cluster algorithm and number of clusters."),
p("Note: Wait for algorithm to finish estimation, hierarchical and spectral algorithms takes more time.",style="color:black"),
#submitButton(text = "refresh", icon("refresh")),
# actionButton(inputId = "apply",label = "refresh", icon("refresh")),br(),br(),
h4(textOutput("caption1")),
htmlOutput("colList"),
#h4("Download Cluster Membership Data"),
downloadButton('downloadData4', 'download cluster solution'), br(),br(),
#submitButton(text = "refresh", icon("refresh")),
#(p('Examine  "Missing Data" tab and uncheck missing data variable(s), if any, in the "Data Selection" panel on the left',style="color:red")),
#h4("Click 'refresh' and wait for algorithm to finish estimation"),
dataTableOutput("table"),tags$head(tags$style("tfoot {display: table-header-group;}")),
br(),br())
)
runApp()
shiny::runApp()
shiny::runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/factor-analysis')
runApp()
if(!require("descriptr")) {install.packages("descriptr")}
library(descriptr)
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/factor-analysis')
runApp()
runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/factor-analysis')
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/ISB-IIDS/ML/cluster-analysis')
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp('D:/OneDrive - Indian School of Business/Laptop sync/Desktop/GitHub/Manish-Gangwar/MLBM/decision-tree')
